(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{170:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),a("blockquote",[a("p",[t._v("从零开始积累")])]),t._v(" "),a("h2",{attrs:{id:"var-和-let-、-const-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-和-let-、-const-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" var 和 let 、 const 的区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("var")]),t._v(" 的作用域是"),a("strong",[t._v("全域")]),t._v("，存在"),a("strong",[t._v("变量提升")]),t._v("，所以可以先使用后声明  (预编译：函数提升优先于变量提升)")]),t._v(" "),a("li",[a("strong",[t._v("let")]),t._v(" 的作用域是"),a("strong",[t._v("块级作用域")]),t._v("，存在"),a("strong",[t._v("暂时性死区")]),t._v("，必须先声明后使用")]),t._v(" "),a("li",[t._v("var在全局作用域下声明变量会导致变量挂载到window上，其他两者不会")]),t._v(" "),a("li",[t._v("let和const作用基本一致，但const声明的变量不能再次赋值")]),t._v(" "),a("li",[t._v("let和const不允许重复声明")])]),t._v(" "),a("h2",{attrs:{id:"判断参数是否存在"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断参数是否存在","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断参数是否存在")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("参数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \n相当于 参数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" 参数 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined\n")])])]),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("h3",{attrs:{id:"基本数据类型（原始类型）有哪几种？null是对象吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型（原始类型）有哪几种？null是对象吗？","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本数据类型（原始类型）有哪几种？null是对象吗？")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型：boolean,string,number,null,undefined,symbol 6种。")]),t._v(" "),a("li",[t._v("null不是对象，typeof null会输出object，是因为以前32为系统会将000开头的代表为对象，但null表示为全零所以被错误判断成object")])]),t._v(" "),a("h3",{attrs:{id:"原始类型和引用类型的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型和引用类型的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 原始类型和引用类型的区别")]),t._v(" "),a("ol",[a("li",[t._v("原始类型存储的是值，引用类型存储的是指针。")]),t._v(" "),a("li",[t._v("原始数据类型直接存储在栈中，引用数据类型存储在堆中。")])]),t._v(" "),a("h2",{attrs:{id:"执行上下文-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文-this","aria-hidden":"true"}},[t._v("#")]),t._v(" 执行上下文 this")]),t._v(" "),a("ul",[a("li",[t._v("在构造函数里 this指向创建的实例对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/** \n * 创建实例对象的过程中执行构造函数, \n * this指向 实例对象p, \n * p.name = "Tom" p.age = 12\n*/')]),t._v("\n")])])]),a("ul",[a("li",[t._v("作为对象属性执行 this指向当前对象")]),t._v(" "),a("li",[t._v("作为普通函数执行 this指向window")]),t._v(" "),a("li",[t._v("call、apply、bind")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//改变func的this指向，指向obj")]),t._v("\nfunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//this 指向window")]),t._v("\n")])])]),a("h2",{attrs:{id:"事件循环（event-loop）、宏任务、微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环（event-loop）、宏任务、微任务","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件循环（event loop）、宏任务、微任务")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v('宏任务：鼠标事件，键盘事件,"ajax","setTimeout"')]),t._v(" "),a("li",[t._v("需要注意的是：主线程的整体代码(script标签)，也是一个宏任务")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("微任务：process.nextTick，PromiseA.then()， MutaionObserver")])])]),t._v(" "),a("ol",[a("li",[t._v("执行宏任务队列中第一个任务，执行完后移除它")]),t._v(" "),a("li",[t._v("执行所有的微任务，执行完后移除它们")]),t._v(" "),a("li",[t._v("执行下一轮宏任务（重复步骤2）")])])])}],!1,null,null,null);s.default=e.exports}}]);